import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useAuth } from "@/hooks/use-auth";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import {
  CardTitle,
  CardHeader,
  CardContent,
  Card,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  RotateCcw,
  Clock,
  RefreshCcw,
  ArrowLeft,
  Wallet,
  BanknoteIcon,
  CheckCircle2,
  Bell,
  CreditCard,
  KeyRound,
  Bank,
} from "lucide-react";
import { formatThaiCurrency, formatDate } from "@/lib/utils";
import { Skeleton } from "@/components/ui/skeleton";
import { useLocation } from "wouter";
import { Account, Withdrawal, WithdrawalFormValues, BankAccountFormValues } from "@shared/schema";
import { useGlobalChat } from "@/context/chat-context";

// Import schemas from shared
import { withdrawalFormSchema, bankAccountSchema } from "@shared/schema";



// Thai bank options
const bankOptions = [
  { value: "กสิกรไทย", label: "ธนาคารกสิกรไทย" },
  { value: "กรุงเทพ", label: "ธนาคารกรุงเทพ" },
  { value: "กรุงไทย", label: "ธนาคารกรุงไทย" },
  { value: "ไทยพาณิชย์", label: "ธนาคารไทยพาณิชย์" },
  { value: "ทหารไทยธนชาต", label: "ธนาคารทหารไทยธนชาต" },
  { value: "กรุงศรีอยุธยา", label: "ธนาคารกรุงศรีอยุธยา" },
  { value: "ซีไอเอ็มบี", label: "ธนาคารซีไอเอ็มบี" },
  { value: "ทิสโก้", label: "ธนาคารทิสโก้" },
  { value: "เกียรตินาคิน", label: "ธนาคารเกียรตินาคิน" },
];

// Withdrawal status component
function WithdrawalStatus({ status }: { status: string }) {
  const getStatusDetails = () => {
    switch (status) {
      case "pending":
        return {
          icon: <Clock className="h-4 w-4 mr-1" />,
          label: "รอการยืนยัน",
          className: "text-yellow-600 bg-yellow-100 rounded-full px-3 py-1 text-xs font-medium flex items-center",
        };
      case "approved":
        return {
          icon: <CheckCircle2 className="h-4 w-4 mr-1" />,
          label: "อนุมัติแล้ว",
          className: "text-green-600 bg-green-100 rounded-full px-3 py-1 text-xs font-medium flex items-center",
        };
      case "rejected":
        return {
          icon: <RotateCcw className="h-4 w-4 mr-1" />,
          label: "ปฏิเสธการถอน",
          className: "text-red-600 bg-red-100 rounded-full px-3 py-1 text-xs font-medium flex items-center",
        };
      default:
        return {
          icon: <RefreshCcw className="h-4 w-4 mr-1" />,
          label: "ไม่ทราบสถานะ",
          className: "bg-gray-100 text-gray-700 rounded-full px-3 py-1 text-xs font-medium flex items-center",
        };
    }
  };

  const { icon, label, className } = getStatusDetails();

  return (
    <div className={className}>
      {icon}
      <span>{label}</span>
    </div>
  );
}

// Component for displaying withdrawal history
const WithdrawalHistory = ({ withdrawals = [] }: { withdrawals?: Withdrawal[] }) => {
  if (!withdrawals.length) {
    return (
      <div className="text-center p-6 text-gray-500">
        <p>ไม่มีรายการถอนเงิน</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {withdrawals.map((withdrawal) => (
        <Card key={withdrawal.id} className="overflow-hidden">
          <div className="p-4">
            <div className="flex justify-between items-start mb-2">
              <div>
                <p className="font-medium">{formatThaiCurrency(withdrawal.amount)}</p>
                <p className="text-sm text-gray-500">
                  {withdrawal.bankName} {withdrawal.accountNumber}
                </p>
              </div>
              <WithdrawalStatus status={withdrawal.status} />
            </div>
            <div className="flex justify-between text-sm text-gray-500 mt-2">
              <p>{formatDate(new Date(withdrawal.createdAt))}</p>
            </div>
          </div>
        </Card>
      ))}
    </div>
  );
};

export default function WithdrawalPage() {
  const [, setLocation] = useLocation();
  const { user } = useAuth();
  const { toast } = useToast();
  const { hasNewWithdrawalUpdate, hasNewAccountUpdate, resetUpdateFlags } = useGlobalChat();
  const [activeTab, setActiveTab] = useState<"form" | "history">("form");
  const [hasNewUpdate, setHasNewUpdate] = useState(false);

  // Get account information
  const { data: account, isLoading: accountLoading } = useQuery<Account>({
    queryKey: ["/api/account"],
    enabled: !!user,
  });

  // Get withdrawal history with real-time updates
  const { data: withdrawals, isLoading: withdrawalsLoading, refetch: refetchWithdrawals } = useQuery<Withdrawal[]>({
    queryKey: ["/api/withdrawals"],
    enabled: !!user,
  });
  
  // Account data with real-time updates
  const { refetch: refetchAccount } = useQuery<Account>({
    queryKey: ["/api/account"],
    enabled: !!user,
  });
  
  // Handle real-time withdrawal updates from WebSocket
  useEffect(() => {
    if (hasNewWithdrawalUpdate) {
      refetchWithdrawals();
      setHasNewUpdate(true);
      setActiveTab("history");
      toast({
        title: "การอัพเดตคำขอถอนเงิน",
        description: "มีการเปลี่ยนแปลงสถานะคำขอถอนเงินของคุณ",
        variant: "default",
      });
      resetUpdateFlags();
    }
  }, [hasNewWithdrawalUpdate, refetchWithdrawals, toast, resetUpdateFlags, setActiveTab]);
  
  // Handle real-time account balance updates
  useEffect(() => {
    if (hasNewAccountUpdate) {
      refetchAccount();
      toast({
        title: "การอัพเดตยอดเงินในบัญชี",
        description: "ยอดเงินในบัญชีของคุณมีการเปลี่ยนแปลง",
        variant: "default",
      });
      resetUpdateFlags();
    }
  }, [hasNewAccountUpdate, refetchAccount, toast, resetUpdateFlags]);

  // Bank account form
  const bankAccountForm = useForm<BankAccountFormValues>({
    resolver: zodResolver(bankAccountSchema),
    defaultValues: {
      bankName: "",
      accountNumber: "",
      accountName: "",
    },
  });

  // Withdrawal form
  const withdrawalForm = useForm<WithdrawalFormValues>({
    resolver: zodResolver(withdrawalFormSchema),
    defaultValues: {
      amount: undefined,
      withdrawalCode: "",
    },
  });

  // State to track if user has added a bank account
  const [hasBankAccount, setHasBankAccount] = useState(false);
  
  // Check if user has a bank account when the component mounts or account data updates
  useEffect(() => {
    if (account && account.bankName && account.accountNumber && account.accountName) {
      setHasBankAccount(true);
    }
  }, [account]);

  // Create withdrawal mutation
  const withdrawalMutation = useMutation({
    mutationFn: async (data: any) => {
      const res = await apiRequest("POST", "/api/withdrawals", data);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "ส่งคำขอถอนเงินเรียบร้อย",
        description: "คำขอถอนเงินของคุณอยู่ระหว่างการตรวจสอบ",
        variant: "default",
      });
      withdrawalForm.reset();
      queryClient.invalidateQueries({ queryKey: ["/api/account"] });
      queryClient.invalidateQueries({ queryKey: ["/api/withdrawals"] });
      setActiveTab("history");
    },
    onError: (error: Error) => {
      toast({
        title: "เกิดข้อผิดพลาด",
        description: error.message || "ไม่สามารถทำรายการได้ กรุณาลองใหม่อีกครั้ง",
        variant: "destructive",
      });
    },
  });

  // Handle bank account form submission
  const onBankAccountSubmit = (data: BankAccountFormValues) => {
    if (!user) return;

    // Add bank account to user's account
    apiRequest("PATCH", "/api/account/bank", data)
      .then(() => {
        toast({
          title: "บัญชีธนาคารถูกเพิ่มเรียบร้อย",
          description: "คุณสามารถใช้บัญชีนี้ในการถอนเงินได้",
          variant: "default",
        });
        queryClient.invalidateQueries({ queryKey: ["/api/account"] });
        setHasBankAccount(true);
      })
      .catch((error) => {
        toast({
          title: "เกิดข้อผิดพลาด",
          description: error.message || "ไม่สามารถเพิ่มบัญชีธนาคารได้ กรุณาลองใหม่อีกครั้ง",
          variant: "destructive",
        });
      });
  };

  // Handle withdrawal form submission
  const onWithdrawalSubmit = (data: WithdrawalFormValues) => {
    if (!user) return;

    if (!account?.balance || data.amount > account.balance) {
      withdrawalForm.setError("amount", {
        type: "validate",
        message: "ยอดเงินไม่เพียงพอ",
      });
      return;
    }

    // Verify withdrawal code
    if (account.withdrawalCode !== data.withdrawalCode) {
      withdrawalForm.setError("withdrawalCode", {
        type: "validate",
        message: "รหัสถอนเงินไม่ถูกต้อง",
      });
      return;
    }

    // Add userId to withdrawal data and bank account details from account
    const withdrawalData = {
      ...data,
      userId: user.id,
      bankName: account.bankName || "",
      accountNumber: account.accountNumber || "",
      accountName: account.accountName || "",
    };

    withdrawalMutation.mutate(withdrawalData);
  };
  


  return (
    <div className="container max-w-md mx-auto p-4 h-full">
      <div className="flex items-center mb-6">
        <Button
          variant="ghost"
          size="icon"
          className="mr-2"
          onClick={() => setLocation("/")}
        >
          <ArrowLeft className="h-5 w-5" />
        </Button>
        <h1 className="text-2xl font-bold">จัดการเงิน</h1>
      </div>

      <Card className="mb-6 overflow-hidden">
        <div className="card-gradient p-6">
          <div className="flex justify-between items-center">
            <div>
              <p className="text-sm font-medium text-white/90 mb-2">ยอดเงินในบัญชี</p>
              {accountLoading ? (
                <Skeleton className="h-8 w-32" />
              ) : (
                <p className="text-2xl font-bold font-mono text-white">
                  {account?.balance !== undefined ? formatThaiCurrency(account.balance) : "฿0.00"}
                </p>
              )}
            </div>
            <div className="bg-white/20 rounded-full p-3">
              <Wallet className="h-6 w-6 text-white" />
            </div>
          </div>
        </div>
      </Card>

      <div className="mb-6 rounded-xl overflow-hidden shadow-sm">
        <div className="grid grid-cols-2 bg-white/80 backdrop-blur-sm">
          <button
            className={`py-4 font-medium text-sm relative transition-all duration-200 ${
              activeTab === "form"
                ? "text-[var(--primary-color)] font-semibold"
                : "text-gray-500 hover:text-gray-700"
            }`}
            onClick={() => setActiveTab("form")}
          >
            ถอนเงิน
            {activeTab === "form" && (
              <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-[var(--primary-color)]"></div>
            )}
          </button>
          <button
            className={`py-4 font-medium text-sm relative transition-all duration-200 ${
              activeTab === "history"
                ? "text-[var(--primary-color)] font-semibold"
                : "text-gray-500 hover:text-gray-700"
            }`}
            onClick={() => setActiveTab("history")}
          >
            ประวัติ
            {activeTab === "history" && (
              <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-[var(--primary-color)]"></div>
            )}
          </button>
        </div>
      </div>

      {activeTab === "form" ? (
        <Card className="shadow-lg rounded-xl overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-teal-50 to-blue-50">
            <CardTitle className="text-lg flex items-center">
              <BanknoteIcon className="mr-2 h-5 w-5 text-teal-600" />
              ถอนเงินเข้าบัญชีธนาคาร
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-6">
            {!hasBankAccount ? (
              <Form {...bankAccountForm}>
                <form onSubmit={bankAccountForm.handleSubmit(onBankAccountSubmit)} className="space-y-6">
            ) : (
              <Form {...withdrawalForm}>
                <form onSubmit={withdrawalForm.handleSubmit(onWithdrawalSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="amount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>จำนวนเงิน</FormLabel>
                      <FormControl>
                        <div className="relative">
                          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
                            ฿
                          </span>
                          <Input
                            {...field}
                            type="number"
                            value={field.value || ""}
                            className="pl-8"
                            placeholder="0.00"
                          />
                        </div>
                      </FormControl>
                      <FormDescription>
                        จำนวนเงินขั้นต่ำ 100 บาท
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="bankName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>ธนาคาร</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="เลือกธนาคาร" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {bankOptions.map((bank) => (
                            <SelectItem key={bank.value} value={bank.value}>
                              {bank.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="accountNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>เลขบัญชี</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="000-0-00000-0" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="accountName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>ชื่อบัญชี</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="ชื่อ-นามสกุล" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="pt-6">
                  <Button
                    type="submit"
                    className="w-full bg-gradient-to-r from-teal-500 to-teal-600 hover:from-teal-600 hover:to-teal-700 text-white font-medium py-6 rounded-xl shadow-md transition-all duration-200 hover:shadow-lg"
                    disabled={withdrawalMutation.isPending}
                  >
                    {withdrawalMutation.isPending ? (
                      <div className="flex items-center justify-center">
                        <RefreshCcw className="h-5 w-5 mr-2 animate-spin" />
                        <span className="text-base">กำลังดำเนินการ...</span>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center">
                        <BanknoteIcon className="h-5 w-5 mr-2" />
                        <span className="text-base">ยืนยันการถอนเงิน</span>
                      </div>
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      ) : (
        <Card className="shadow-lg rounded-xl overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-blue-50 to-teal-50">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg flex items-center">
                <Clock className="mr-2 h-5 w-5 text-teal-600" />
                ประวัติการถอนเงิน
              </CardTitle>
              {hasNewUpdate && (
                <div className="bg-green-100 text-green-700 rounded-full px-3 py-1 text-xs font-medium flex items-center animate-pulse">
                  <Bell className="h-3 w-3 mr-1" />
                  <span>มีการอัพเดตล่าสุด</span>
                </div>
              )}
            </div>
          </CardHeader>
          <CardContent className="pt-6">
            {withdrawalsLoading ? (
              <div className="space-y-4">
                <Skeleton className="h-24 w-full rounded-lg" />
                <Skeleton className="h-24 w-full rounded-lg" />
              </div>
            ) : (
              <WithdrawalHistory withdrawals={withdrawals || []} />
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}