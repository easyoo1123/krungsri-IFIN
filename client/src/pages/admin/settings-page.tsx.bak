import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/use-auth";
import { HexColorPicker } from "react-colorful";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger
} from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import {
  Palette,
  Sliders,
  Layout,
  Type,
  Globe,
  Settings,
  Save,
  RefreshCcw,
  Check,
  TextCursor,
  Pencil,
  PanelLeftClose
} from "lucide-react";

// ประเภทข้อมูลสำหรับธีม
interface ThemeSettings {
  primary: string;
  variant: "professional" | "tint" | "vibrant";
  appearance: "light" | "dark" | "system";
  radius: number;
}

// ประเภทข้อมูลสำหรับฟอนต์
interface FontSettings {
  family: string;
  size: {
    base: number;
    h1: number;
    h2: number;
    h3: number;
    small: number;
  };
  color: {
    primary: string;
    secondary: string;
    muted: string;
  };
  weight: {
    normal: number;
    medium: number;
    bold: number;
  };
}

// ประเภทข้อมูลสำหรับการตั้งค่าแบรนด์
interface BrandSettings {
  siteName: string;
  logoUrl: string;
  siteDescription: string;
  footerText: string;
  fonts: FontSettings;
  login: {
    logoIcon: string;
    mainTitle: string;
    subTitle: string;
    backgroundColor: string;
    headerText: string;
    buttonColor: string;
    buttonTextColor: string;
    titleFontSize: number;
    titleFontColor: string;
    subtitleFontSize: number;
    subtitleFontColor: string;
  };
}

export default function SettingsPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isSaving, setIsSaving] = useState(false);
  const [themeSettings, setThemeSettings] = useState<ThemeSettings>({
    primary: "hsl(179, 75%, 37%)",
    variant: "professional",
    appearance: "light",
    radius: 0.5,
  });

  const [brandSettings, setBrandSettings] = useState<BrandSettings>({
    siteName: "CashLuxe",
    logoUrl: "",
    siteDescription: "บริการเงินกู้ออนไลน์ รวดเร็ว ปลอดภัย น่าเชื่อถือ",
    footerText: "© 2025 CashLuxe - บริการเงินกู้ออนไลน์",
    fonts: {
      family: "'Sukhumvit Set', 'Noto Sans Thai', sans-serif",
      size: {
        base: 16,
        h1: 32,
        h2: 24,
        h3: 20, 
        small: 14
      },
      color: {
        primary: "#1a2942",
        secondary: "#4b5563",
        muted: "#6b7280"
      },
      weight: {
        normal: 400,
        medium: 500,
        bold: 700
      }
    },
    login: {
      logoIcon: "",
      mainTitle: "CashLuxe",
      subTitle: "สินเชื่อส่วนบุคคล ทางเลือกทางการเงินที่เชื่อถือได้",
      backgroundColor: "hsl(179, 75%, 37%)",
      headerText: "เข้าสู่ระบบ",
      buttonColor: "hsl(179, 75%, 37%)",
      buttonTextColor: "#ffffff",
      titleFontSize: 32,
      titleFontColor: "#1a2942",
      subtitleFontSize: 16,
      subtitleFontColor: "#4b5563"
    }
  });

  // โหลดการตั้งค่าธีมเมื่อหน้าเว็บโหลด
  useEffect(() => {
    const fetchThemeSettings = async () => {
      try {
        const response = await apiRequest("GET", "/api/admin/settings/theme");
        if (response.ok) {
          const data = await response.json();
          setThemeSettings(data);
        }
      } catch (error) {
        console.error("Failed to load theme settings:", error);
        toast({
          title: "เกิดข้อผิดพลาด",
          description: "ไม่สามารถโหลดการตั้งค่าธีมได้",
          variant: "destructive",
        });
      }
    };

    const fetchBrandSettings = async () => {
      try {
        const response = await apiRequest("GET", "/api/admin/settings/brand");
        if (response.ok) {
          const data = await response.json();
          setBrandSettings(data);
        }
      } catch (error) {
        console.error("Failed to load brand settings:", error);
        toast({
          title: "เกิดข้อผิดพลาด",
          description: "ไม่สามารถโหลดการตั้งค่าแบรนด์ได้",
          variant: "destructive",
        });
      }
    };

    fetchThemeSettings();
    fetchBrandSettings();
  }, [toast]);

  // บันทึกการตั้งค่าธีม
  const saveThemeSettings = async () => {
    setIsSaving(true);
    try {
      const response = await apiRequest("POST", "/api/admin/settings/theme", themeSettings);
      
      if (response.ok) {
        toast({
          title: "บันทึกการตั้งค่าธีมสำเร็จ",
          description: "การเปลี่ยนแปลงจะมีผลทันที",
          variant: "default",
        });
        
        // รีโหลดหน้าเว็บเพื่อให้การเปลี่ยนแปลงมีผล
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        throw new Error("Failed to save theme settings");
      }
    } catch (error) {
      toast({
        title: "เกิดข้อผิดพลาด",
        description: "ไม่สามารถบันทึกการตั้งค่าธีมได้",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  // บันทึกการตั้งค่าแบรนด์
  const saveBrandSettings = async () => {
    setIsSaving(true);
    try {
      const response = await apiRequest("POST", "/api/admin/settings/brand", brandSettings);
      
      if (response.ok) {
        toast({
          title: "บันทึกการตั้งค่าแบรนด์สำเร็จ",
          description: "การเปลี่ยนแปลงจะมีผลทันที",
          variant: "default",
        });
      } else {
        throw new Error("Failed to save brand settings");
      }
    } catch (error) {
      toast({
        title: "เกิดข้อผิดพลาด",
        description: "ไม่สามารถบันทึกการตั้งค่าแบรนด์ได้",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  // แปลงค่าสี HSL เป็น RGB สำหรับการแสดงผล
  const parseHslToRgb = (hslColor: string) => {
    // แปลงค่าสี HSL เป็น RGB (simplified)
    return hslColor;
  };

  // บันทึกทั้งหมด
  const saveAllSettings = async () => {
    await saveThemeSettings();
    await saveBrandSettings();
  };

  if (!user?.isAdmin) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Card>
          <CardHeader>
            <CardTitle>ไม่มีสิทธิ์เข้าถึง</CardTitle>
            <CardDescription>คุณไม่มีสิทธิ์ในการเข้าถึงหน้านี้</CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6 max-w-4xl">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">ตั้งค่าระบบ</h1>
          <p className="text-muted-foreground">ปรับแต่งการแสดงผลและการตั้งค่าของเว็บไซต์</p>
        </div>
        <Button onClick={saveAllSettings} className="gap-2" disabled={isSaving}>
          {isSaving ? <RefreshCcw className="h-4 w-4 animate-spin" /> : <Save className="h-4 w-4" />}
          บันทึกการตั้งค่าทั้งหมด
        </Button>
      </div>

      <Tabs defaultValue="theme">
        <TabsList className="grid grid-cols-2 mb-6">
          <TabsTrigger value="theme" className="gap-2">
            <Palette className="h-4 w-4" />
            ธีมและรูปแบบ
          </TabsTrigger>
          <TabsTrigger value="brand" className="gap-2">
            <Settings className="h-4 w-4" />
            แบรนด์และข้อความ
          </TabsTrigger>
        </TabsList>

        {/* แท็บตั้งค่าธีมและรูปแบบ */}
        <TabsContent value="theme" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* การ์ดเลือกสีหลัก */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Palette className="h-5 w-5" />
                  สีหลัก
                </CardTitle>
                <CardDescription>
                  เลือกสีหลักสำหรับปุ่มและองค์ประกอบที่สำคัญในเว็บไซต์
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <HexColorPicker
                    color={themeSettings.primary}
                    onChange={(color) => setThemeSettings({ ...themeSettings, primary: color })}
                    className="w-full"
                  />
                  <div className="mt-4">
                    <Label htmlFor="primary-color">ค่าสี (HSL หรือ HEX)</Label>
                    <Input
                      id="primary-color"
                      value={themeSettings.primary}
                      onChange={(e) => setThemeSettings({ ...themeSettings, primary: e.target.value })}
                      className="mt-1"
                    />
                  </div>
                  <div className="flex gap-2 mt-4">
                    <div 
                      className="w-full h-12 rounded-md border" 
                      style={{ background: themeSettings.primary }}
                    ></div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => setThemeSettings({ ...themeSettings, primary: "hsl(179, 75%, 37%)" })}
                >
                  รีเซ็ตเป็นค่าเริ่มต้น
                </Button>
              </CardFooter>
            </Card>

            {/* การ์ดตั้งค่ารูปแบบธีม */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sliders className="h-5 w-5" />
                  รูปแบบธีม
                </CardTitle>
                <CardDescription>
                  ปรับแต่งรูปแบบการแสดงผลทั่วทั้งเว็บไซต์
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="variant">รูปแบบสี</Label>
                  <Select
                    value={themeSettings.variant}
                    onValueChange={(value: "professional" | "tint" | "vibrant") => setThemeSettings({ ...themeSettings, variant: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="เลือกรูปแบบสี" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">มืออาชีพ</SelectItem>
                      <SelectItem value="tint">นุ่มนวล</SelectItem>
                      <SelectItem value="vibrant">สดใส</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="appearance">โหมดธีม</Label>
                  <Select
                    value={themeSettings.appearance}
                    onValueChange={(value: "light" | "dark" | "system") => setThemeSettings({ ...themeSettings, appearance: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="เลือกโหมดธีม" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="light">สว่าง</SelectItem>
                      <SelectItem value="dark">มืด</SelectItem>
                      <SelectItem value="system">ตามระบบ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="radius">ความโค้งมน ({themeSettings.radius})</Label>
                  </div>
                  <Slider
                    id="radius"
                    min={0}
                    max={2}
                    step={0.1}
                    value={[themeSettings.radius]}
                    onValueChange={(value) => setThemeSettings({ ...themeSettings, radius: value[0] })}
                  />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <div>เหลี่ยม</div>
                    <div>มน</div>
                  </div>

                  <div className="flex gap-2 mt-6">
                    <div className="w-full h-12 bg-primary rounded-sm flex items-center justify-center text-white text-sm">
                      เหลี่ยม
                    </div>
                    <div 
                      className="w-full h-12 bg-primary flex items-center justify-center text-white text-sm"
                      style={{ borderRadius: `${themeSettings.radius * 8}px` }}
                    >
                      ตัวอย่าง
                    </div>
                    <div className="w-full h-12 bg-primary rounded-full flex items-center justify-center text-white text-sm">
                      กลม
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button onClick={saveThemeSettings} className="w-full gap-2" disabled={isSaving}>
                  {isSaving ? <RefreshCcw className="h-4 w-4 animate-spin" /> : <Save className="h-4 w-4" />}
                  บันทึกการตั้งค่าธีม
                </Button>
              </CardFooter>
            </Card>
          </div>

          {/* ตัวอย่างองค์ประกอบ UI */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Layout className="h-5 w-5" />
                ตัวอย่างองค์ประกอบ UI
              </CardTitle>
              <CardDescription>
                ดูตัวอย่างองค์ประกอบ UI ที่จะแสดงในเว็บไซต์ตามการตั้งค่าที่เลือก
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h4 className="text-sm font-medium">ปุ่ม</h4>
                  <div className="flex flex-wrap gap-2">
                    <Button variant="default">ปุ่มหลัก</Button>
                    <Button variant="secondary">ปุ่มรอง</Button>
                    <Button variant="outline">ปุ่มเส้นขอบ</Button>
                    <Button variant="ghost">ปุ่มโปร่งใส</Button>
                    <Button variant="destructive">ปุ่มลบ</Button>
                  </div>
                </div>

                <div className="space-y-4">
                  <h4 className="text-sm font-medium">ฟอร์ม</h4>
                  <div className="space-y-2">
                    <Label htmlFor="example-input">ช่องป้อนข้อมูล</Label>
                    <Input id="example-input" placeholder="ตัวอย่างข้อมูล" />
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch id="example-switch" />
                    <Label htmlFor="example-switch">สวิตช์ตัวอย่าง</Label>
                  </div>
                </div>
              </div>

              <div className="mt-6">
                <h4 className="text-sm font-medium mb-2">การ์ด</h4>
                <Card className="w-full">
                  <CardHeader>
                    <CardTitle>หัวข้อการ์ดตัวอย่าง</CardTitle>
                    <CardDescription>คำอธิบายการ์ดตัวอย่าง</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p>เนื้อหาการ์ดตัวอย่าง</p>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline">ยกเลิก</Button>
                    <Button className="ml-2">ตกลง</Button>
                  </CardFooter>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* แท็บตั้งค่าแบรนด์และข้อความ */}
        <TabsContent value="brand" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* ข้อมูลแบรนด์ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  ข้อมูลแบรนด์
                </CardTitle>
                <CardDescription>
                  ตั้งค่าข้อมูลแบรนด์และข้อความที่แสดงบนเว็บไซต์
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="site-name">ชื่อเว็บไซต์</Label>
                  <Input
                    id="site-name"
                    value={brandSettings.siteName}
                    onChange={(e) => setBrandSettings({ ...brandSettings, siteName: e.target.value })}
                    placeholder="ชื่อเว็บไซต์"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="logo-url">URL โลโก้ (ถ้ามี)</Label>
                  <Input
                    id="logo-url"
                    value={brandSettings.logoUrl}
                    onChange={(e) => setBrandSettings({ ...brandSettings, logoUrl: e.target.value })}
                    placeholder="https://example.com/logo.png"
                  />
                {brandSettings.logoUrl && (
                  <div className="mt-2 p-2 border rounded-md">
                    <p className="text-sm text-muted-foreground mb-2">ตัวอย่างโลโก้:</p>
                    <img
                      src={brandSettings.logoUrl}
                      alt="Logo preview"
                      className="max-h-20 max-w-full"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = "https://placehold.co/200x80?text=Logo+Error";
                      }}
                    />
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="site-description">คำอธิบายเว็บไซต์</Label>
                <Input
                  id="site-description"
                  value={brandSettings.siteDescription}
                  onChange={(e) => setBrandSettings({ ...brandSettings, siteDescription: e.target.value })}
                  placeholder="คำอธิบายสั้นๆ เกี่ยวกับเว็บไซต์"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="footer-text">ข้อความส่วนท้าย</Label>
                <Input
                  id="footer-text"
                  value={brandSettings.footerText}
                  onChange={(e) => setBrandSettings({ ...brandSettings, footerText: e.target.value })}
                  placeholder="ข้อความส่วนท้ายเว็บไซต์"
                />
              </div>
              
              {/* หน้าเข้าสู่ระบบ */}
              <div className="mt-8 pt-6 border-t">
                <h3 className="text-lg font-medium mb-4">ตั้งค่าหน้าเข้าสู่ระบบ</h3>
                
                <div className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="login-logo-icon">URL ไอคอนบัตร</Label>
                    <Input
                      id="login-logo-icon"
                      value={brandSettings.login.logoIcon}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          logoIcon: e.target.value
                        }
                      })}
                      placeholder="URL ไอคอนที่แสดงในหน้าเข้าสู่ระบบ"
                    />
                    {brandSettings.login.logoIcon && (
                      <div className="mt-2 p-2 border rounded-md">
                        <p className="text-sm text-muted-foreground mb-2">ตัวอย่างไอคอน:</p>
                        <div className="flex justify-center">
                          <img
                            src={brandSettings.login.logoIcon}
                            alt="Login icon preview"
                            className="max-h-16 max-w-16"
                            onError={(e) => {
                              const target = e.target as HTMLImageElement;
                              target.src = "https://placehold.co/64x64?text=Icon+Error";
                            }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="login-main-title">ชื่อหลักในหน้าเข้าสู่ระบบ</Label>
                    <Input
                      id="login-main-title"
                      value={brandSettings.login.mainTitle}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          mainTitle: e.target.value
                        }
                      })}
                      placeholder="ชื่อหลักที่แสดงในหน้าเข้าสู่ระบบ"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="login-sub-title">ข้อความอธิบายในหน้าเข้าสู่ระบบ</Label>
                    <Input
                      id="login-sub-title"
                      value={brandSettings.login.subTitle}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          subTitle: e.target.value
                        }
                      })}
                      placeholder="ข้อความอธิบายที่แสดงในหน้าเข้าสู่ระบบ"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="login-header-text">ข้อความด้านบนหน้าเข้าสู่ระบบ</Label>
                    <Input
                      id="login-header-text"
                      value={brandSettings.login.headerText}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          headerText: e.target.value
                        }
                      })}
                      placeholder="เช่น 'เข้าสู่ระบบ'"
                    />
                  </div>

                  <div className="space-y-4">
                    <Label htmlFor="login-background-color">สีพื้นหลังหน้าเข้าสู่ระบบ</Label>
                    <HexColorPicker
                      color={brandSettings.login.backgroundColor}
                      onChange={(color) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          backgroundColor: color
                        }
                      })}
                      className="w-full"
                    />
                    <div className="mt-4">
                      <Input
                        id="login-background-color"
                        value={brandSettings.login.backgroundColor}
                        onChange={(e) => setBrandSettings({
                          ...brandSettings,
                          login: {
                            ...brandSettings.login,
                            backgroundColor: e.target.value
                          }
                        })}
                        className="mt-1"
                      />
                    </div>
                    <div className="flex gap-2 mt-4">
                      <div 
                        className="w-full h-12 rounded-md border" 
                        style={{ background: brandSettings.login.backgroundColor }}
                      ></div>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <Label htmlFor="login-button-color">สีปุ่มเข้าสู่ระบบ</Label>
                    <HexColorPicker
                      color={brandSettings.login.buttonColor}
                      onChange={(color) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          buttonColor: color
                        }
                      })}
                      className="w-full"
                    />
                    <div className="mt-4">
                      <Input
                        id="login-button-color"
                        value={brandSettings.login.buttonColor}
                        onChange={(e) => setBrandSettings({
                          ...brandSettings,
                          login: {
                            ...brandSettings.login,
                            buttonColor: e.target.value
                          }
                        })}
                        className="mt-1"
                      />
                    </div>
                    <div className="flex gap-2 mt-4">
                      <div 
                        className="w-full h-12 rounded-md border flex items-center justify-center" 
                        style={{ background: brandSettings.login.buttonColor, color: brandSettings.login.buttonTextColor }}
                      >
                        เข้าสู่ระบบ
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <Label htmlFor="login-button-text-color">สีข้อความปุ่มเข้าสู่ระบบ</Label>
                    <HexColorPicker
                      color={brandSettings.login.buttonTextColor}
                      onChange={(color) => setBrandSettings({
                        ...brandSettings,
                        login: {
                          ...brandSettings.login,
                          buttonTextColor: color
                        }
                      })}
                      className="w-full"
                    />
                    <div className="mt-4">
                      <Input
                        id="login-button-text-color"
                        value={brandSettings.login.buttonTextColor}
                        onChange={(e) => setBrandSettings({
                          ...brandSettings,
                          login: {
                            ...brandSettings.login,
                            buttonTextColor: e.target.value
                          }
                        })}
                        className="mt-1"
                      />
                    </div>
                  </div>
                  
                  {/* ตัวอย่างหน้าล็อกอิน */}
                  <div className="mt-6 p-4 border rounded-md">
                    <h4 className="text-sm font-medium mb-4">ตัวอย่างหน้าเข้าสู่ระบบ</h4>
                    <div className="w-full aspect-[9/16] max-w-[280px] mx-auto rounded-md overflow-hidden shadow-md" 
                         style={{ background: brandSettings.login.backgroundColor }}>
                      <div className="flex flex-col h-full items-center justify-center p-6 text-white">
                        {brandSettings.login.logoIcon ? (
                          <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mb-8">
                            <img 
                              src={brandSettings.login.logoIcon} 
                              alt="Login logo" 
                              className="w-8 h-8"
                              onError={(e) => {
                                const target = e.target as HTMLImageElement;
                                target.src = "https://placehold.co/32x32?text=Icon";
                              }}
                            />
                          </div>
                        ) : (
                          <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mb-8">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <rect x="3" y="5" width="18" height="14" rx="2" stroke="white" strokeWidth="2" />
                              <path d="M3 10H21" stroke="white" strokeWidth="2" />
                            </svg>
                          </div>
                        )}
                        
                        <h2 className="text-xl font-bold mb-2">{brandSettings.login.headerText || "เข้าสู่ระบบ"}</h2>
                        <h3 className="text-lg font-bold mb-2">{brandSettings.login.mainTitle || "CashLuxe"}</h3>
                        <p className="text-center text-sm text-white/80">{brandSettings.login.subTitle || "สินเชื่อส่วนบุคคล ทางเลือกทางการเงินที่เชื่อถือได้"}</p>
                        
                        <div className="mt-8 w-full">
                          <div className="w-full p-3 rounded-md flex items-center justify-center"
                               style={{ background: brandSettings.login.buttonColor, color: brandSettings.login.buttonTextColor }}>
                            <span className="text-sm font-medium">เข้าสู่ระบบ</span>
                          </div>
                        </div>
                        
                        <div className="mt-auto">
                          <div className="w-8 h-8 border border-white/50 rounded-full flex items-center justify-center">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M6 9L12 15L18 9" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={saveBrandSettings} className="w-full gap-2" disabled={isSaving}>
                {isSaving ? <RefreshCcw className="h-4 w-4 animate-spin" /> : <Save className="h-4 w-4" />}
                บันทึกการตั้งค่าแบรนด์
              </Button>
            </CardFooter>
          </Card>

          {/* การตั้งค่าฟอนต์ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TextCursor className="h-5 w-5" />
                การตั้งค่าตัวอักษร (ฟอนต์)
              </CardTitle>
              <CardDescription>
                ปรับแต่งรูปแบบ สี และขนาดของฟอนต์ทั่วทั้งเว็บไซต์
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h3 className="text-base font-medium">ครอบครัวฟอนต์</h3>
                <div className="space-y-2">
                  <Label htmlFor="font-family">ครอบครัวฟอนต์หลัก</Label>
                  <Input
                    id="font-family"
                    value={brandSettings.fonts.family}
                    onChange={(e) => setBrandSettings({
                      ...brandSettings,
                      fonts: {
                        ...brandSettings.fonts,
                        family: e.target.value
                      }
                    })}
                    placeholder="'Sukhumvit Set', 'Noto Sans Thai', sans-serif"
                  />
                  <p className="text-xs text-muted-foreground">ระบุชื่อฟอนต์หลายชื่อและคั่นด้วยเครื่องหมายคอมม่า</p>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-base font-medium">ขนาดฟอนต์</h3>
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="base-font-size">ขนาดพื้นฐาน ({brandSettings.fonts.size.base}px)</Label>
                    </div>
                    <Slider
                      id="base-font-size"
                      min={12}
                      max={20}
                      step={1}
                      value={[brandSettings.fonts.size.base]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          size: {
                            ...brandSettings.fonts.size,
                            base: value[0]
                          }
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="h1-font-size">ขนาดหัวข้อใหญ่ (H1) ({brandSettings.fonts.size.h1}px)</Label>
                    </div>
                    <Slider
                      id="h1-font-size"
                      min={24}
                      max={48}
                      step={1}
                      value={[brandSettings.fonts.size.h1]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          size: {
                            ...brandSettings.fonts.size,
                            h1: value[0]
                          }
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="h2-font-size">ขนาดหัวข้อรอง (H2) ({brandSettings.fonts.size.h2}px)</Label>
                    </div>
                    <Slider
                      id="h2-font-size"
                      min={18}
                      max={36}
                      step={1}
                      value={[brandSettings.fonts.size.h2]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          size: {
                            ...brandSettings.fonts.size,
                            h2: value[0]
                          }
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="h3-font-size">ขนาดหัวข้อย่อย (H3) ({brandSettings.fonts.size.h3}px)</Label>
                    </div>
                    <Slider
                      id="h3-font-size"
                      min={16}
                      max={28}
                      step={1}
                      value={[brandSettings.fonts.size.h3]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          size: {
                            ...brandSettings.fonts.size,
                            h3: value[0]
                          }
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="small-font-size">ขนาดข้อความเล็ก ({brandSettings.fonts.size.small}px)</Label>
                    </div>
                    <Slider
                      id="small-font-size"
                      min={10}
                      max={16}
                      step={1}
                      value={[brandSettings.fonts.size.small]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          size: {
                            ...brandSettings.fonts.size,
                            small: value[0]
                          }
                        }
                      })}
                    />
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-base font-medium">สีฟอนต์</h3>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="primary-font-color">สีข้อความหลัก</Label>
                    <HexColorPicker
                      color={brandSettings.fonts.color.primary}
                      onChange={(color) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          color: {
                            ...brandSettings.fonts.color,
                            primary: color
                          }
                        }
                      })}
                      className="w-full mt-2"
                    />
                    <Input
                      id="primary-font-color"
                      value={brandSettings.fonts.color.primary}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          color: {
                            ...brandSettings.fonts.color,
                            primary: e.target.value
                          }
                        }
                      })}
                      className="mt-2"
                    />
                    <div 
                      className="w-full h-12 mt-2 rounded-md border flex items-center justify-center px-4" 
                      style={{ color: brandSettings.fonts.color.primary }}
                    >
                      ตัวอย่างข้อความหลัก
                    </div>
                  </div>
                  
                  <div>
                    <Label htmlFor="secondary-font-color">สีข้อความรอง</Label>
                    <HexColorPicker
                      color={brandSettings.fonts.color.secondary}
                      onChange={(color) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          color: {
                            ...brandSettings.fonts.color,
                            secondary: color
                          }
                        }
                      })}
                      className="w-full mt-2"
                    />
                    <Input
                      id="secondary-font-color"
                      value={brandSettings.fonts.color.secondary}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          color: {
                            ...brandSettings.fonts.color,
                            secondary: e.target.value
                          }
                        }
                      })}
                      className="mt-2"
                    />
                    <div 
                      className="w-full h-12 mt-2 rounded-md border flex items-center justify-center px-4" 
                      style={{ color: brandSettings.fonts.color.secondary }}
                    >
                      ตัวอย่างข้อความรอง
                    </div>
                  </div>
                  
                  <div>
                    <Label htmlFor="muted-font-color">สีข้อความจาง</Label>
                    <HexColorPicker
                      color={brandSettings.fonts.color.muted}
                      onChange={(color) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          color: {
                            ...brandSettings.fonts.color,
                            muted: color
                          }
                        }
                      })}
                      className="w-full mt-2"
                    />
                    <Input
                      id="muted-font-color"
                      value={brandSettings.fonts.color.muted}
                      onChange={(e) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          color: {
                            ...brandSettings.fonts.color,
                            muted: e.target.value
                          }
                        }
                      })}
                      className="mt-2"
                    />
                    <div 
                      className="w-full h-12 mt-2 rounded-md border flex items-center justify-center px-4" 
                      style={{ color: brandSettings.fonts.color.muted }}
                    >
                      ตัวอย่างข้อความจาง
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <h3 className="text-base font-medium">น้ำหนักฟอนต์</h3>
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="normal-font-weight">น้ำหนักปกติ ({brandSettings.fonts.weight.normal})</Label>
                    </div>
                    <Slider
                      id="normal-font-weight"
                      min={300}
                      max={500}
                      step={100}
                      value={[brandSettings.fonts.weight.normal]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          weight: {
                            ...brandSettings.fonts.weight,
                            normal: value[0]
                          }
                        }
                      })}
                    />
                    <div 
                      className="w-full h-12 mt-2 rounded-md border flex items-center justify-center px-4" 
                      style={{ fontWeight: brandSettings.fonts.weight.normal }}
                    >
                      ตัวอย่างน้ำหนักปกติ
                    </div>
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="medium-font-weight">น้ำหนักกลาง ({brandSettings.fonts.weight.medium})</Label>
                    </div>
                    <Slider
                      id="medium-font-weight"
                      min={400}
                      max={600}
                      step={100}
                      value={[brandSettings.fonts.weight.medium]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          weight: {
                            ...brandSettings.fonts.weight,
                            medium: value[0]
                          }
                        }
                      })}
                    />
                    <div 
                      className="w-full h-12 mt-2 rounded-md border flex items-center justify-center px-4" 
                      style={{ fontWeight: brandSettings.fonts.weight.medium }}
                    >
                      ตัวอย่างน้ำหนักกลาง
                    </div>
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label htmlFor="bold-font-weight">น้ำหนักหนา ({brandSettings.fonts.weight.bold})</Label>
                    </div>
                    <Slider
                      id="bold-font-weight"
                      min={600}
                      max={900}
                      step={100}
                      value={[brandSettings.fonts.weight.bold]}
                      onValueChange={(value) => setBrandSettings({
                        ...brandSettings,
                        fonts: {
                          ...brandSettings.fonts,
                          weight: {
                            ...brandSettings.fonts.weight,
                            bold: value[0]
                          }
                        }
                      })}
                    />
                    <div 
                      className="w-full h-12 mt-2 rounded-md border flex items-center justify-center px-4" 
                      style={{ fontWeight: brandSettings.fonts.weight.bold }}
                    >
                      ตัวอย่างน้ำหนักหนา
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-8">
                <h3 className="text-base font-medium mb-4">ตัวอย่างการแสดงผลฟอนต์</h3>
                <div className="p-4 border rounded-md space-y-4">
                  <h1 style={{ 
                    fontFamily: brandSettings.fonts.family,
                    fontSize: `${brandSettings.fonts.size.h1}px`, 
                    color: brandSettings.fonts.color.primary,
                    fontWeight: brandSettings.fonts.weight.bold
                  }}>
                    หัวข้อใหญ่ (H1)
                  </h1>
                  
                  <h2 style={{ 
                    fontFamily: brandSettings.fonts.family,
                    fontSize: `${brandSettings.fonts.size.h2}px`, 
                    color: brandSettings.fonts.color.primary,
                    fontWeight: brandSettings.fonts.weight.bold
                  }}>
                    หัวข้อรอง (H2)
                  </h2>
                  
                  <h3 style={{ 
                    fontFamily: brandSettings.fonts.family,
                    fontSize: `${brandSettings.fonts.size.h3}px`, 
                    color: brandSettings.fonts.color.primary,
                    fontWeight: brandSettings.fonts.weight.medium
                  }}>
                    หัวข้อย่อย (H3)
                  </h3>
                  
                  <p style={{ 
                    fontFamily: brandSettings.fonts.family,
                    fontSize: `${brandSettings.fonts.size.base}px`, 
                    color: brandSettings.fonts.color.primary,
                    fontWeight: brandSettings.fonts.weight.normal
                  }}>
                    ข้อความปกติ (Base): นี่คือตัวอย่างข้อความเนื้อหาปกติที่ใช้แสดงผลสำหรับเนื้อหาหลักในเว็บไซต์
                  </p>
                  
                  <p style={{ 
                    fontFamily: brandSettings.fonts.family,
                    fontSize: `${brandSettings.fonts.size.base}px`, 
                    color: brandSettings.fonts.color.secondary,
                    fontWeight: brandSettings.fonts.weight.normal
                  }}>
                    ข้อความรอง: สีข้อความรองมักใช้สำหรับเนื้อหาที่มีความสำคัญรองลงมาหรือต้องการแยกให้เห็นความแตกต่าง
                  </p>
                  
                  <p style={{ 
                    fontFamily: brandSettings.fonts.family,
                    fontSize: `${brandSettings.fonts.size.small}px`, 
                    color: brandSettings.fonts.color.muted,
                    fontWeight: brandSettings.fonts.weight.normal
                  }}>
                    ข้อความขนาดเล็ก (Small): ใช้สำหรับคำอธิบายเพิ่มเติม ลิขสิทธิ์ หรือข้อมูลที่มีความสำคัญน้อยกว่า
                  </p>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button onClick={saveBrandSettings} className="w-full gap-2" disabled={isSaving}>
                {isSaving ? <RefreshCcw className="h-4 w-4 animate-spin" /> : <Save className="h-4 w-4" />}
                บันทึกการตั้งค่าฟอนต์
              </Button>
            </CardFooter>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Type className="h-5 w-5" />
                ตัวอย่างการแสดงผล
              </CardTitle>
              <CardDescription>
                ดูตัวอย่างการแสดงผลของข้อมูลแบรนด์
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="border rounded-md p-4 space-y-6">
                <div className="flex items-center gap-2">
                  {brandSettings.logoUrl ? (
                    <img
                      src={brandSettings.logoUrl}
                      alt="Logo"
                      className="h-8"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = "https://placehold.co/80x30?text=Logo";
                      }}
                    />
                  ) : (
                    <div className="font-bold text-xl">{brandSettings.siteName}</div>
                  )}
                </div>
                
                <div className="border-t pt-4">
                  <p className="text-muted-foreground">{brandSettings.siteDescription}</p>
                </div>
                
                <div className="border-t pt-4">
                  <p className="text-sm text-muted-foreground">{brandSettings.footerText}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}